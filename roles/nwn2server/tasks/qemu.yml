

- name: Qemu Packages install
  apt:
    name: "{{item}}"
  with_items:
    - qemu
    - qemu-kvm
    - python3
    - python3-winrm

- name: Check if qemu disk is present
  command: ls "{{nwn2_path_root}}/nwn2server-vmdisk.{{qemu_disk_format}}"
  ignore_errors: yes
  register: chk_qemudisk
  changed_when: False

- name: Upload Qemu compressed disk
  copy:
    src: "{{qemu_disk_download_url}}"
    dest: "{{nwn2_path_root}}/nwn2server-vmdisk.{{qemu_disk_format}}{{(qemu_disk_download_url | splitext)[1]}}"
  when:
    - chk_qemudisk | failed
    - qemu_disk_download_url | urlsplit('scheme') == ''

- name: Download Qemu compressed disk from URL
  get_url:
    remote_src: "{{qemu_disk_download_url | urlsplit('scheme') != ''}}"
    url: "{{qemu_disk_download_url}}"
    dest: "{{nwn2_path_root}}/nwn2server-vmdisk.{{qemu_disk_format}}{{(qemu_disk_download_url | urlsplit('path') | splitext)[1]}}"
  when:
    - chk_qemudisk | failed
    - qemu_disk_download_url | urlsplit('scheme') != ''

- name: Extract Qemu disk
  command: xz -d {{nwn2_path_root}}/nwn2server-vmdisk.{{qemu_disk_format}}{{(qemu_disk_download_url | urlsplit('path') | splitext)[1]}}
  args:
    creates: "{{nwn2_path_root}}/nwn2server-vmdisk.{{qemu_disk_format}}"


- name: Copy nwn2server launch script
  template:
    src: qemu-launch.j2
    dest: "{{nwn2_path_root}}/bin/launch"
    mode: 0755

- name: Copy controller script
  template:
    src: nwn2server-controller.j2
    dest: "{{nwn2_path_root}}/bin/nwn2server-controller"
    mode: 0755

- name: Copy nwn2server service file
  template:
    src: nwn2server@.service.j2
    dest: /etc/systemd/system/nwn2server@.service
    mode: 0644

- name: Enable & start nwn2server
  systemd:
    name: "nwn2server@{{nwn2_path_root | basename}}.service"
    state: started
    enabled: yes

- name: "UFW: Enable NWN2Server port"
  ufw:
    rule: allow
    port: "{{nwn2server_public_port}}"
    proto: udp

- name: Configure UFW to forward {{nwn2server_public_port}} to nwn2server (nat table)
  blockinfile:
    path: /etc/ufw/before.rules
    insertafter: '^\*nat'
    marker: "# {mark} ANSIBLE MANAGED BLOCK: Qemu NAT setup"
    block: |
      -A POSTROUTING -o {{ansible_facts.ansible_default_ipv4.interface}} -j MASQUERADE
      -A PREROUTING -p udp --dport {{nwn2server_public_port}} -j DNAT --to {{nwn2server_private_ip}}:5121
  register: ufw_config_nat

- name: Configure UFW to forward {{nwn2server_public_port}} to nwn2server (filter table)
  blockinfile:
    path: /etc/ufw/before.rules
    insertafter: '^\*filter'
    marker: "# {mark} ANSIBLE MANAGED BLOCK: Qemu filter setup"
    block: |
      -A FORWARD -d {{nwn2server_private_ip}} -p udp --dport 5121 -j ACCEPT
  register: ufw_config_filter

- name: Reload UFW
  systemd:
    name: "ufw.service"
    state: reload
  when: ufw_config_nat.changed || ufw_config_filter.changed

- name: Set static IP for the VM via dhcpd.conf
  blockinfile:
    path: /etc/dhcp/dhcpd.conf
    insertafter: '^\s*subnet\s+10.0.2.0\s*\{.*?\}\s*$'
    marker: "# {mark} ANSIBLE MANAGED BLOCK: DHCP host for {{nwn2_path_root}}"
    block: |
      host {
        hardware ethernet 01:23:45:67:89:{{"%02x" | format(nwn2server_private_ip.split(".")[3] | int)}};
        fixed-address {{nwn2server_private_ip}};
      }
  register: dhcpd_conf

- name: Reload DHCP server
  systemd:
    name: "isc-dhcp-server.service"
    state: reload
  when: dhcpd_conf.changed